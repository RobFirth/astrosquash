from app import db

class Fixtures(db.Model):
    id = db.Column(db.Integer, primary_key = True)
    timestamp = db.Column(db.DateTime)

    winner_id = db.Column(db.Integer, db.ForeignKey('Player.id'))
    loser_id = db.Column(db.Integer, db.ForeignKey('Player.id'))
    winner = db.relationship('Player', backref='win', lazy='dynamic')
    loser = db.relationship('Player', backref='lose', lazy='dynamic')
    def __repr__(self):
        return '<Fixture %r>' % (self.timestamp)

class Player(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    played = db.Column(db.Integer, index=True)
    won = db.Column(db.Integer, index=True)
    lost = db.Column(db.Integer, index=True)
    name = db.Column(db.String(64), index=True)
    photourl = db.Column(db.String(120), index=True, unique=True)

    wins = db.Column(db.Integer, db.ForeignKey('Fixtures.winner'))
    losses = db.Column(db.Integer, db.ForeignKey('Fixtures.loser'))

    def __repr__(self):
            return '<User %r>' % (self.name)
from app import db

class Fixtures(db.Model):
    id = db.Column(db.Integer, primary_key = True)
    timestamp = db.Column(db.DateTime)
    winner_id = db.Column(db.Integer, db.ForeignKey('player.id'))

    def __repr__(self):
        return '<Fixture %r>' % (self.timestamp)

class Player(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    played = db.Column(db.Integer, index=True)
    won = db.Column(db.Integer, index=True)
    lost = db.Column(db.Integer, index=True)
    name = db.Column(db.String(64), index=True)
    photourl = db.Column(db.String(120), index=True, unique=True)
    
    posts = db.relationship('Fixtures', backref='author', lazy='dynamic')

    def __repr__(self):
            return '<User %r>' % (self.name)


-----------------------
from app import db

class Fixtures(db.Model):
    id = db.Column(db.Integer, primary_key = True)
    timestamp = db.Column(db.DateTime)
    winner_id = db.Column(db.Integer, db.ForeignKey('player.id'))
    
    def __repr__(self):
        return '<Fixture %r>' % (self.timestamp)

class Player(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    played = db.Column(db.Integer, index=True)
    won = db.Column(db.Integer, index=True)
    lost = db.Column(db.Integer, index=True)
    name = db.Column(db.String(64), index=True)
    photourl = db.Column(db.String(120), index=True, unique=True)
    
    posts = db.relationship('Fixtures', backref='author', lazy='dynamic')

    def __repr__(self):
            return '<User %r>' % (self.name)


----------------------
from app import db
from sqlalchemy import Table, Column, Integer, ForeignKey
from sqlalchemy.orm import relationship, backref
from sqlalchemy.ext.declarative import declarative_base

association_table = Table('association', db.Model.metadata,
    Column('left_id', Integer, ForeignKey('left.id')),
    Column('right_id', Integer, ForeignKey('right.id'))
)


class Fixtures(db.Model):
    id = db.Column(db.Integer, primary_key = True)
    timestamp = db.Column(db.DateTime)
    winner_id = db.Column(db.Integer, db.ForeignKey('player.id'))

    def __repr__(self):
        return '<Fixture %r>' % (self.timestamp)

class Player(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    played = db.Column(db.Integer, index=True)
    won = db.Column(db.Integer, index=True)
    lost = db.Column(db.Integer, index=True)
    name = db.Column(db.String(64), index=True)
    photourl = db.Column(db.String(120), index=True, unique=True)
    
    posts = db.relationship('Fixtures', backref='author', lazy='dynamic')

    def __repr__(self):
            return '<User %r>' % (self.name)



--------------
from app import db

playee = db.Table('playee',
    db.Column('winner_id', db.Integer, db.ForeignKey('player.id')),
    db.Column('loser_id', db.Integer, db.ForeignKey('player.id'))
)

class Fixtures(db.Model):
    id = db.Column(db.Integer, primary_key = True)
    timestamp = db.Column(db.DateTime)
    
    players = db.relationship('Player', 
                               secondary=playee, 
                               primaryjoin=(playee.c.winner_id == id), 
                               secondaryjoin=(playee.c.loser_id == id), 
                               backref=db.backref('playee', lazy='dynamic'), 
                               lazy='dynamic')
    def __repr__(self):
        return '<Fixture %r>' % (self.timestamp)

class Player(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    played = db.Column(db.Integer, index=True)
    won = db.Column(db.Integer, index=True)
    lost = db.Column(db.Integer, index=True)
    name = db.Column(db.String(64), index=True)
    photourl = db.Column(db.String(120), index=True, unique=True)
    
    def __repr__(self):
            return '<User %r>' % (self.name)
-------------------
from app import db

class Fixtures(db.Model):
    id = db.Column(db.Integer, primary_key = True)
    timestamp = db.Column(db.DateTime)
    
    winner_id = db.Column(db.Integer, index = True)
    loser_id = db.Column(db.Integer, index = True)
    def __repr__(self):
        return '<Fixture %r>' % (self.timestamp)

class Player(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    played = db.Column(db.Integer, index=True)
    won = db.Column(db.Integer, index=True)
    lost = db.Column(db.Integer, index=True)
    name = db.Column(db.String(64), index=True)
    photourl = db.Column(db.String(120), index=True, unique=True)
    
    def __repr__(self):
            return '<User %r>' % (self.name)

-------------------


from app import db
class Player(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    played = db.Column(db.Integer, index=True)
    won = db.Column(db.Integer, index=True)
    lost = db.Column(db.Integer, index=True)
    name = db.Column(db.String(64), index=True)
    photourl = db.Column(db.String(120), index=True, unique=True)
    def __repr__(self):
            return '<User %r>' % (self.name)
class Fixtures(db.Model):
    id = db.Column(db.Integer, primary_key = True)
    timestamp = db.Column(db.DateTime)
    winner_id = db.Column(db.Integer, db.ForeignKey('Player.id'))
    loser_id = db.Column(db.Integer, db.ForeignKey('Player.id'))
    def __repr__(self):
        return '<Fixture %r>' % (self.timestamp)